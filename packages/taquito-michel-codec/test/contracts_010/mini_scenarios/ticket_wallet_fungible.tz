## A simple wallet for fungible tokens implemented using tickets of
## type [ticket unit].

## For actually minting or burning the tokens, see ticket_builder_fungible.tz

## For non-fungible tokens, see ticket_wallet_non_fungible.tz

parameter (or (ticket %receive unit) (pair %send (contract %destination (ticket unit)) (nat %amount) (address %ticketer)));
storage (pair (address %manager) (big_map %tickets address (ticket unit)));
code
  {
    AMOUNT; PUSH mutez 0; ASSERT_CMPEQ;

    UNPAIR 3;
    IF_LEFT
      {
        # Receive entrypoint

        # Get the ticketer
        READ_TICKET; CAR @ticketer; DUP;

        # Extract the associated ticket, if any, from the stored big map
        DIG 4;
        NONE (ticket unit);
        DIG 2;
        GET_AND_UPDATE;

        # Join it with the parameter
        IF_SOME
          {
            DIG 3;
            PAIR;
            JOIN_TICKETS;
            ASSERT_SOME
          }
          { DIG 2 };
        SOME;
        DIG 2;
        GET_AND_UPDATE;
        ASSERT_NONE;
        SWAP;
        PAIR;
        NIL operation
      }
      {
        # Send entrypoints

        # Authenticate SENDER
        DUP @manager 2; SENDER; ASSERT_CMPEQ;

        UNPAIR 3;

        # Get the ticket associated to the requested ticketer
        DIG 4;
        NONE (ticket unit);
        DUP @ticketer 5;
        GET_AND_UPDATE;
        ASSERT_SOME;

        # Substract the requested amount
        READ_TICKET;
        GET @total_amount 4;
        DUP @amount 5;
        SWAP; SUB; ISNAT; ASSERT_SOME @remaining_amount;

        # Split the ticket
        DIG 4; PAIR; SWAP; SPLIT_TICKET;
        ASSERT_SOME; UNPAIR @to_send @to_keep;

        # Store the ticket to keep
        DUG 5;
        SOME;
        DIG 3;
        GET_AND_UPDATE;
        ASSERT_NONE;
        DIG 2; PAIR;

        # Send the ticket
        SWAP;
        PUSH mutez 0;
        DIG 3;
        TRANSFER_TOKENS;
        NIL operation;
        SWAP;
        CONS;
      };
    PAIR
  }
