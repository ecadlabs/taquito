## A simple wallet for non-fungible tokens implemented using tickets
## of type [ticket nat].

## For each nat [n], the ticketer is assumed to produce at most one
## ticket containing [n] and to always use amounts of exactly one.

## For fungible tokens, see ticket_wallet_fungible.tz

parameter (or (ticket %receive nat) (pair %send (contract %destination (ticket nat)) (address %ticketer) (nat %id)));
storage (pair (address %manager) (big_map %tickets (pair address nat) (ticket nat)));
code
  {
    AMOUNT; PUSH mutez 0; ASSERT_CMPEQ;

    UNPAIR 3;
    IF_LEFT
      {
        # Receive entrypoint

        # Get the ticketer and id
        READ_TICKET; CAST (pair (address %ticketer) (nat %id) (nat %amount));
        UNPAIR 3;
        DIG 2; PUSH nat 1; ASSERT_CMPEQ; # This checks that the amount is 1
        PAIR;

        # Extract the associated ticket, if any, from the stored big map
        DIP {SOME; DIP {SWAP}};
        GET_AND_UPDATE;
        ASSERT_NONE;

        SWAP;
        PAIR;
        NIL operation
      }
      {
        # Send entrypoints

        # Authenticate SENDER
        DUP @manager 2; SENDER; ASSERT_CMPEQ;

        UNPAIR;

        # Get the ticket associated to the requested ticketer and id
        DIG 3;
        NONE (ticket nat);
        DIG 3;
        GET_AND_UPDATE;
        ASSERT_SOME;

        SWAP; DIG 3; PAIR; DUG 2;

        # Send the ticket
        PUSH mutez 0;
        SWAP;
        TRANSFER_TOKENS;
        NIL operation;
        SWAP;
        CONS;
      };
    PAIR
  }
