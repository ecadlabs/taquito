parameter (pair
               (pair :payload
                  (nat %counter) # counter, used to prevent replay attacks
                  (or :action    # payload to sign, represents the requested action
                     (pair :transfer    # transfer tokens
                        (mutez %amount) # amount to transfer
                        (contract %dest unit)) # destination to transfer to
                     (or
                        (option %delegate key_hash) # change the delegate to this address
                        (pair %change_keys          # change the keys controlling the multisig
                           (nat %threshold)         # new threshold
                           (list %keys key)))))     # new list of keys
               (list %sigs (option signature)));    # signatures
storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key))) ;
code
    {
      UNPAIR ; SWAP ; DUP ; DIP { SWAP } ;
      DIP
        {
          UNPAIR ;
          # pair the payload with the current contract address, to ensure signatures
          # can't be replayed across different contracts if a key is reused.
          DUP ; SELF ; ADDRESS ; CHAIN_ID ; PAIR ; PAIR ;
          PACK ; # form the binary payload that we expect to be signed
          DIP { UNPAIR @counter ; DIP { SWAP } } ; SWAP
        } ;
      # Check that the counters match
      UNPAIR @stored_counter; DIP { SWAP };
      ASSERT_CMPEQ ;
      # Compute the number of valid signatures
      DIP { SWAP } ; UNPAIR @threshold @keys;
      DIP
        {
          # Running count of valid signatures
          PUSH @valid nat 0; SWAP ;
          ITER
            {
              DIP { SWAP } ; SWAP ;
              IF_CONS
                {
                  IF_SOME
                    { SWAP ;
                      DIP
                        {
                          SWAP ; DIIP { DUUP } ;
                          # Checks signatures, fails if invalid
                          { DUUUP; DIP {CHECK_SIGNATURE}; SWAP; IF {DROP} {FAILWITH} };
                          PUSH nat 1 ; ADD @valid } }
                    { SWAP ; DROP }
                }
                {
                  # There were fewer signatures in the list
                  # than keys. Not all signatures must be present, but
                  # they should be marked as absent using the option type.
                  FAIL
                } ;
              SWAP
            }
        } ;
      # Assert that the threshold is less than or equal to the
      # number of valid signatures.
      ASSERT_CMPLE ;
      DROP ; DROP ;
      # Increment counter and place in storage
      DIP { UNPAIR ; PUSH nat 1 ; ADD @new_counter ; PAIR} ;
      # We have now handled the signature verification part,
      # produce the operation requested by the signers.
      NIL operation ; SWAP ;
      IF_LEFT
        { # Transfer tokens
          UNPAIR ; UNIT ; TRANSFER_TOKENS ; CONS }
        { IF_LEFT {
                    # Change delegate
                    SET_DELEGATE ; CONS }
                  {
                    # Change set of signatures
                    DIP { SWAP ; CAR } ; SWAP ; PAIR ; SWAP }} ;
      PAIR }
