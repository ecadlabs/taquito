parameter (pair
             int
             (pair
                nat
                (pair
                   string
                   (pair bytes (pair mutez (pair bool (pair key_hash (pair timestamp address))))))));
storage unit ;
code { CAR;
       # Check the int
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK int; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the nat
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK nat; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the string
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK string; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the bytes
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK bytes; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the mutez
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK mutez; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the bool
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK bool; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the key_hash
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK key_hash; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the timestamp
       DUP; CAR; DIP { UNPAIR; }; PACK; UNPACK timestamp; ASSERT_SOME; ASSERT_CMPEQ;
       # Check the address
       DUP; PACK; UNPACK address; ASSERT_SOME; ASSERT_CMPEQ;

       # Assert failure modes of unpack
       PUSH int 0; PACK; UNPACK nat; ASSERT_SOME; DROP;
       PUSH int -1; PACK; UNPACK nat; ASSERT_NONE;

       # Try deserializing invalid byte sequence (no magic number)
       PUSH bytes 0x; UNPACK nat; ASSERT_NONE;
       PUSH bytes 0x04; UNPACK nat; ASSERT_NONE;

       # Assert failure for byte sequences that do not correspond to
       # any micheline value
       PUSH bytes 0x05; UNPACK nat; ASSERT_NONE;

       UNIT ; NIL operation ; PAIR }
