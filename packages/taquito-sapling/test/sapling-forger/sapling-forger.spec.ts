import { SaplingForger } from '../../src/sapling-forger/sapling-forger';
import {
  outputDescription,
  spendDescription,
  transaction,
  txPlainText,
} from '../data/sapling_test_data';

describe('Sapling Forger tests', () => {
  const forger = new SaplingForger();

  it('should be able to forge spendDescriptions', () => {
    const forged = forger.forgeSpendDescriptions(spendDescription);

    expect(forged).toBeDefined();
    expect(forged.length).toBeGreaterThan(0);
    expect(forged.toString('hex')).toEqual(
      '25919e0a5b8cdd62985613838f8d26e6f53ee491946bf055aea003e69773816e208c4e296a95c34bf3886f62b3eaabc3c28feaf8067bf493030ae1f689fc4d852658565805aeb044d7a5c7cc1b65fe967e4b5fcd8f3ae42758bf014150c24c5eb2a06c5d13b05df8546c51a725e2c7ac7f671fa89ccf912a1ca81f8ef1cc652d563574f57dc094c1bf49eb7cd66acd3096191a5226239969e198259ec00b1218c949be6a982ea356a30fb5c0a2205767fe97e6654ea15ddeec0520f76cf96a0315b26ed670e529439c6bd80d74167167356adada9c1fd02bab9f165578d703bea3cb06e4aa19e9bb736d196eebd20e809709f28f88d3b82015171e7c18c94b013d3161e0847f53eaeecba0b1577d78a4dda9426f152953e4ece672f2f730b0e73f7ede556eb3be9d801b642980b23b7caf4e1ed00f5fa7ad76ef7993419d43c121560696866e1aa40822ea2785b828befe9f16fb979e8b6365b769ef9e71cf08'
    );
  });

  it('should be able to forge outputDescriptions', () => {
    const forged = forger.forgeOutputDescriptions(outputDescription);

    expect(forged).toBeDefined();
    expect(forged.length).toBeGreaterThan(0);
    expect(forged.toString('hex')).toEqual(
      '2ce279d669436c31dcf28b8341bfe9163ae60dcc05c483c3ab6647186e7069068991859c7b6ec23e9d1b7634a93b549bc190bf0bde3dfaf82e33fc215ef70eac93cc197deb25f0e79a78eb99c417ef7b985a7461529ae5df99cc21285e60f21746a1572ffe2e4ed9db617912fcc38d050ea876eddb18786f240437eb256c156419fe1e3546d7c21caf771d726af7350ab00d95c07b0c7bfd068bb6bb4d10ec4480fbaa710f5e6d5a78e0499cc41ec093a6c177aaa1e9156934feaeb08b8f71dbe2bb6b52023d5b9a250e5c90ef73982a8c049d068f8e4753491299dac24d54245990ecf3bba4ea96f6ea3623c9825c2fec949c6454325eea02edb96f8f67c4d13d6713c38c922231eb9913506b6f3e3fe97dcfd49473b635116897ad958dd7b70000004f2929fb7899d521475898b5ae3e08b64a1f48b304cae6d420c45f68e9d9731d1fa0ce24187200561cc0720b40bc7dfa4b6b721312af56d7a4ecfebe7dc6d29a3acb61968a1b1588158adc89c8c861c30dfee76a654f660d5fc8b60da0c63b600ab52fa13dc957d27c761c915a79a50c7ba20316ec9e4248c3692e65833141d2f0eb3a8ceeb6f78a2beba6b3b8ac12719a29c75628c089ead1d317868a39f35cda9789549c0524c5279acf92f591b886444dc435bf202b3c5f484cf9c9c2c671107447632f648d1acee6039dc37a2d33'
    );
  });

  it('should be able to forge Sapling transactions', () => {
    const forged = forger.forgeSaplingTransaction(transaction);

    expect(forged).toBeDefined();
    expect(forged.length).toBeGreaterThan(0);
    expect(forged.toString('hex')).toEqual(
      '0000016025919e0a5b8cdd62985613838f8d26e6f53ee491946bf055aea003e69773816e208c4e296a95c34bf3886f62b3eaabc3c28feaf8067bf493030ae1f689fc4d852658565805aeb044d7a5c7cc1b65fe967e4b5fcd8f3ae42758bf014150c24c5eb2a06c5d13b05df8546c51a725e2c7ac7f671fa89ccf912a1ca81f8ef1cc652d563574f57dc094c1bf49eb7cd66acd3096191a5226239969e198259ec00b1218c949be6a982ea356a30fb5c0a2205767fe97e6654ea15ddeec0520f76cf96a0315b26ed670e529439c6bd80d74167167356adada9c1fd02bab9f165578d703bea3cb06e4aa19e9bb736d196eebd20e809709f28f88d3b82015171e7c18c94b013d3161e0847f53eaeecba0b1577d78a4dda9426f152953e4ece672f2f730b0e73f7ede556eb3be9d801b642980b23b7caf4e1ed00f5fa7ad76ef7993419d43c121560696866e1aa40822ea2785b828befe9f16fb979e8b6365b769ef9e71cf08000001f32ce279d669436c31dcf28b8341bfe9163ae60dcc05c483c3ab6647186e7069068991859c7b6ec23e9d1b7634a93b549bc190bf0bde3dfaf82e33fc215ef70eac93cc197deb25f0e79a78eb99c417ef7b985a7461529ae5df99cc21285e60f21746a1572ffe2e4ed9db617912fcc38d050ea876eddb18786f240437eb256c156419fe1e3546d7c21caf771d726af7350ab00d95c07b0c7bfd068bb6bb4d10ec4480fbaa710f5e6d5a78e0499cc41ec093a6c177aaa1e9156934feaeb08b8f71dbe2bb6b52023d5b9a250e5c90ef73982a8c049d068f8e4753491299dac24d54245990ecf3bba4ea96f6ea3623c9825c2fec949c6454325eea02edb96f8f67c4d13d6713c38c922231eb9913506b6f3e3fe97dcfd49473b635116897ad958dd7b70000004f2929fb7899d521475898b5ae3e08b64a1f48b304cae6d420c45f68e9d9731d1fa0ce24187200561cc0720b40bc7dfa4b6b721312af56d7a4ecfebe7dc6d29a3acb61968a1b1588158adc89c8c861c30dfee76a654f660d5fc8b60da0c63b600ab52fa13dc957d27c761c915a79a50c7ba20316ec9e4248c3692e65833141d2f0eb3a8ceeb6f78a2beba6b3b8ac12719a29c75628c089ead1d317868a39f35cda9789549c0524c5279acf92f591b886444dc435bf202b3c5f484cf9c9c2c671107447632f648d1acee6039dc37a2d33fcda27280bbfcd3b2e4aa744c017095ef0ef0e7d6b41a3a50ce2ddf181c4cb9f5460888a4f6f5e7fa5bcc8474e9a100920ef68eb2ef7ee0fde46c8849c1f250e0000000000000000394014364027c953a527172390d9ac9d9bbe01089389ef664acd732cd62e402800000000'
    );
  });

  it('should be able to forge transaction plaintext', () => {
    const forged = forger.forgeTransactionPlaintext(txPlainText);

    expect(forged).toBeDefined();
    expect(forged.length).toBeGreaterThan(0);
    expect(forged.toString('hex')).toEqual(
      '6f3d5e524fa92140aeeeba00000000001e84807ac1402d90bc7c0211690babf7bb0a9975fd7f5c0e0fd2307d095e851ab83505000000104120676966740000'
    );
  });
});
